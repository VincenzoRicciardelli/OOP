
1.  Quando un metodo è dichiarato 'static'..
[ ] A1.1 - ..puo' accedere qualsiasi attributo
[ ] A1.2 - ..puo' accedere solo ad attributi static
[X] A1.3 - ..deve essere invocato tramite un reference
[ ] A1.4 - ..non richiede un reference per essere invocato
[X] A1.5 - ..è visibile solo all'interno del package


2. A cosa serve l'operatore `<>`?
[ ] A2.1 - a effetuare un confronto tra riferimenti
[ ] A2.2 - a definire uno scambio di valori tra variabili
[X] A2.3 - a definire parametri generici con un'inferenza di tipo
[ ] A2.4 - a definire un *method reference*
[ ] A2.5 - a definire una classe astratta


3. Un errore (rispetto a failure) di un test JUnit:
[X] A3.1 - corrisponde ad una asserzione falsa
[ ] A3.2 - corrisponde ad una eccezione lanciata dal programma testato 
[ ] A3.3 - non puo' corrispondere ad una linea con un assert
[ ] A3.4 - corrisponde ad throw nel programma testato
[ ] A3.5 - corrisponde al metodo fail()


4. L'ereditarietà tra due classi permette di
[ ] A4.1 - rimuovere attributi
[X] A4.2 - aggiungere attributi
[ ] A4.3 - rimuovere metodi
[ ] A4.4 - ridefinire metodi
[X] A4.5 - aggiungere metodi


Per selezionare una risposta inserire una "X" tra le "[ ]" --> "[X]"